---

- name: Set GLB DC REST API endpoint and vars for {{ data_center.name }}
  ansible.builtin.set_fact:
    fad_api_endpoint_glb_data_center: "https://{{ ansible_host }}/api/global_load_balance_data_center?vdom={{ fad_vdom }}&mkey={{ data_center.name }}"
    # do GET request against the resources and save them into a var
    fad_glb_data_center_existing_data: >
      {{
      (lookup('url', 'https://%s/api/global_load_balance_data_center?vdom=%s&mkey=%s'
       % (ansible_host, fad_vdom, data_center.name), validate_certs=false, split_lines=false,
       headers=fad_api_header) | from_json).get('payload')
       }}
    # template json to be used for request body for POST and PUT task
    fad_glb_data_center_request_body: |
      {
        "mkey": "{{ data_center.name }}",
        "location": "{{ data_center.location }}"
      }

- name: Print out the created endpoint and vars for {{ data_center.name }}
  ansible.builtin.debug:
    msg:
      - "fad_api_endpoint_glb_data_center: {{ fad_api_endpoint_glb_data_center }}"
      - "fad_glb_data_center_existing_data: {{ fad_glb_data_center_existing_data }}"
      - "fad_glb_data_center_request_body: {{ fad_glb_data_center_request_body }}"
  tags:
    - debug

- name: Create new data center entry if entry not found for {{ data_center.name }}
  ansible.builtin.uri:
    method: POST
    url: "https://{{ ansible_host }}/api/global_load_balance_data_center?vdom={{ fad_vdom }}&mkey={{ data_center.name }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: "{{ fad_glb_data_center_request_body }}"
  register: fad_glb_data_center_post_result
  when: >
    (lookup('url', 'https://%s/api/global_load_balance_data_center?vdom=%s&mkey=%s'
    % (ansible_host, fad_vdom, data_center.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').get('mkey') is undefined
  # changed_when: "fad_glb_data_center_post_result.json.payload == 0"
  # failed_when: "fad_glb_data_center_post_result.json.payload != -15 and fad_glb_data_center_post_result.json.payload != 0"

- name: Update the data center entry if entry exist for {{ data_center.name }}
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_api_endpoint_glb_data_center }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: "{{ fad_glb_data_center_request_body }}"
  register: fad_glb_data_center_put_result
  when: >
    (fad_glb_data_center_existing_data.mkey is defined) and
    (data_center.location != fad_glb_data_center_existing_data.location)
  changed_when: "fad_glb_data_center_put_result.json.payload == 0"
  failed_when: "fad_glb_data_center_put_result.json.payload != -15 and fad_glb_data_center_put_result.json.payload != 0"

- name: If data has changed, print the new value of data center entry for {{ data_center.name }}
  ansible.builtin.debug:
    msg: >
      "fad_glb_data_center_new_data:
      {{ (lookup('url', 'https://%s/api/global_load_balance_data_center?vdom=%s&mkey=%s'
      % (ansible_host, fad_vdom, data_center.name), validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload') }}"
  when: >
    (lookup('url', 'https://%s/api/global_load_balance_data_center?vdom=%s&mkey=%s'
     % (ansible_host, fad_vdom, data_center.name), validate_certs=false, split_lines=false,
     headers=fad_api_header) | from_json).get('payload') != fad_glb_data_center_existing_data
  tags:
    - debug
