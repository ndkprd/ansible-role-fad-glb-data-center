---
# ./.github/workflows/release.yaml

name: Release

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.set_var.outputs.NEW_VERSION }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Read and and update current the version based on tag.
        # yeah, I know this dumb, don't mind me
        run: |
          git describe --tags --abbrev=0 > CURRENT_VERSION
          cat CURRENT_VERSION
          version=$(cat CURRENT_VERSION)
          version=${version#v}
          major_minor="${version%.*}"
          patch_number="${version##*.}"
          new_patch_number=$((patch_number + 1))
          new_version="${major_minor}.${new_patch_number}"
          echo "$new_version" > NEW_VERSION
          echo "Updated from $version to $new_version"
      - name: Pass the current file into a var.
        id: set_var
        run: echo "NEW_VERSION=$(cat NEW_VERSION)" >> $GITHUB_OUTPUT

  github-release:
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v2
      - name: Create a release.
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "v${{ needs.bump-version.outputs.NEW_VERSION }}"
          prerelease: false
          title: "v${{ needs.bump-version.outputs.NEW_VERSION }}"

  push-to-galaxy:
    runs-on: ubuntu-latest
    needs: github-release
    if: ${{ needs.github-release.result == 'success' }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4
      - name: Set up Python 3.
        uses: actions/setup-python@v5
      - name: Install Ansible.
        run: pip3 install ansible-core
      - name: Import role to Galaxy.
        run: >-
          ansible-galaxy role import --api-key ${{ secrets.GALAXY_API_KEY }}
          $(echo ${{ github.repository }} | cut -d/ -f1) $(echo ${{ github.repository }} | cut -d/ -f2)

  send-mail-notification:
    runs-on: ubuntu-latest
    needs: push-to-galaxy
    if: ${{ needs.push-to-galaxy.result == 'success '}}
    steps:
      - name: Send mail
        uses: dawidd6/action-send-mail@v3
        with:
          # Required mail server address if not connection_url:
          server_address: smtp.gmail.com
          # Server port, default 25:
          server_port: 465
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Optional (recommended) mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: Your latest Github Actions for ${{github.repository}} is Successful.
          # Required recipients' addresses:
          to: ${{secrets.MAIL_USERNAME}}
          # Required sender full name (address can be skipped):
          from: Github Action
          # Optional plain body:
          body: Build job of ${{github.repository}} completed successfully!
          # Optional HTML body read from file:
          # html_body: file://README.html
          # Optional carbon copy recipients:
          # cc: kyloren@example.com,leia@example.com
          # Optional blind carbon copy recipients:
          # bcc: r2d2@example.com,hansolo@example.com
          # Optional recipient of the email response:
          # reply_to: luke@example.com
          # Optional Message ID this message is replying to:
          # in_reply_to: <random-luke@example.com>
          # Optional unsigned/invalid certificates allowance:
          ignore_cert: true
          # Optional converting Markdown to HTML (set content_type to text/html too):
          # convert_markdown: true
          # Optional attachments:
          # attachments: attachments.zip,git.diff,./dist/static/*.js
          # Optional priority: 'high', 'normal' (default) or 'low'
          priority: low
          # Optional nodemailerlog: true/false
          nodemailerlog: false
          # Optional nodemailerdebug: true/false if true lognodem will also be set true
          nodemailerdebug: false